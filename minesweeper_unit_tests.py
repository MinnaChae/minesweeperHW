"""
Name: Aqueno Nirasmi, Minna Chae, Sarah St. Albin
Assignment: Minesweeper
Class: TCSS 504
"""
import unittest
import os
import filecmp
from unittest.mock import patch
from minesweeper_team_solution import Minesweeper


class MinesweeperTests(unittest.TestCase):

    def test_minesweeper_init(self):
        """
        Tests the general functionality of __init__ constructor.
        :return: None
        """
        input_file = "test_input.txt"
        output_file = "test_output.txt"

        minesweeper_instance = Minesweeper(input_file, output_file)

        minesweeper_instance.run_minesweeper_solution()

        # Assert that the attributes are set correctly, object is properly instantiated
        self.assertEqual(minesweeper_instance.input_file, input_file)
        self.assertEqual(minesweeper_instance.output_file, output_file)

<<<<<<< HEAD
=======

>>>>>>> 4c225dd78a4bd467814f76047c315bca9172f03b
    def test_run_minesweeper_solution(self):
        """
        Tests the general functionality of the run_minesweeper_solution method.
        :return: None
        """

        input_file = "test_input.txt"
        output_file = "test_output.txt"

        minesweeper_instance = Minesweeper(input_file, output_file)
        minesweeper_instance.run_minesweeper_solution()

        # Assert that the output is what is expected given the input (the method actually solves the problem)
        self.assertTrue(filecmp.cmp(output_file, "expected_output.txt", shallow=False))

    def test_read_field(self):
        """
        Tests the basic functionality of the read_field method.
        :return: None
        """
        input_file = "test_input.txt"
        output_file = "test_output.txt"

        minesweeper_instance = Minesweeper(input_file, output_file)

        with open(input_file, "r") as input_file:
            # Assertions
            num_of_rows, field = minesweeper_instance.read_field(input_file)
            # Number of rows is grabbed and returned as an integer
            assert isinstance(num_of_rows, int)
            # The field returned is a list
            assert isinstance(field, list)
            # The correct dimensions are returned
            assert len(field) == num_of_rows

    def test_process_the_field(self):
        """
        Tests basic functionality of process_the_field method.
        :return:
        """
        input_file = "test_input.txt"
        output_file = "test_output.txt"

        minesweeper_instance = Minesweeper(input_file, output_file)

        mock_field = ['...**', '.....', '.....', '*....', '.*.*.']

        processed_field = minesweeper_instance.process_the_field(mock_field)

        expected_field = ['001**', '00122', '11000', '*2211', '2*2*1']

        # Assert that process_the_field returns a processed field in the correct format
        self.assertEqual(processed_field, expected_field)

    def test_count_adjacent_mines(self):
        """
        Tests basic functionality of the count_adjacent_mines method.
        :return:
        """
        input_file = "test_input.txt"
        output_file = "test_output.txt"

        minesweeper_instance = Minesweeper(input_file, output_file)

        mock_field = ['...**', '.....', '.....', '*....', '.*.*.']

        test_mine_count = minesweeper_instance.count_adjacent_mines(mock_field, 2, 2)
        expected_mine_count = 0

        # Assert that the number returned is an integer
        self.assertIsInstance(test_mine_count, int, "The returned mine count should be an integer")

        # Assert that the method is counting mines correctly
        self.assertEqual(expected_mine_count, test_mine_count, "The method did not correctly count adjacent mines")
<<<<<<< HEAD

    def test_read_col_row_data_single_minefield(self):
        """
        Testing the input read for Minefield row, col, and data
        """
        with open('test_row_col_data.txt', 'r') as file:
            first_line = file.readline().rstrip()
            expected_row, expected_col = first_line.split()
            expected_row = int(expected_row)
            expected_col = int(expected_col)
            expected_data = [file.readline().rstrip() for _ in range(expected_row)]

        ms = Minesweeper('test_row_col_data.txt', 'output_test_row_col_data.txt')

        with open('test_row_col_data.txt', 'r') as file:
            row_count, data = ms.read_field(file)
        col_count = len(data)
        self.assertEqual(expected_row, row_count, "Testing for input of rows")
        self.assertEqual(expected_col, col_count, "Testing for input of col")
        self.assertEqual(expected_data, data, "Testing for input of data")
=======
 
    def test_read_col_row_data_single_minefield(self):
            """
            Testing the input read for Minefield row, col, and data
            """
            with open('minefield.txt', 'r') as file:
                first_line = file.readline().rstrip()
                expected_row, expected_col = first_line.split()
                expected_row = int(expected_row)
                expected_col = int(expected_col)
                expected_data = [file.readline().rstrip() for _ in range(expected_row)]

            ms = Minesweeper('minefield.txt', 'minesweeper_output.txt')

            with open('minefield.txt', 'r') as file:
                row_count, data = ms.read_field(file)
            col_count = len(data)
            self.assertEqual(expected_row, row_count, "Testing for input of rows")
            self.assertEqual(expected_col, col_count, "Testing for input of col")
            self.assertEqual(expected_data, data, "Testing for input of data")
>>>>>>> 4c225dd78a4bd467814f76047c315bca9172f03b

    def test_write_to_output(self):
        """
        Tests basic functionality of write_to_output: it writes to the output file with the correct formatting.
        :return:
        """
        input_file = "test_input_multiple_fields.txt"
        output_file = "test_output_multiple_fields.txt"
        expected_output = "expected_output_multiple_fields.txt"

        minesweeper_instance = Minesweeper(input_file, output_file)

        mock_field = [
            ['*100', '2210', '1*10', '1110'],
            ['**100', '33200', '1*100'],
            ['*'],
            ['0']
        ]

        minesweeper_instance.write_to_output(mock_field)

        with open(output_file, "r") as file:
            output_content = file.read()

        with open(expected_output, "r") as expected_file:
            expected_content = expected_file.read()

        self.assertEqual(output_content, expected_content)

    def test_given_minefield_proper_formatting(self):
        """
        Tests that a minefield is formatted properly.
        """
        input_file = "test_input.txt"
        output_file = "test_output.txt"
        expected_output = "expected_output.txt"

        minesweeper_instance = Minesweeper(input_file, output_file)

        minesweeper_instance.run_minesweeper_solution()

        with open(output_file, "r") as file:
            formatted_minefield = file.read()
            first_line = file.readline()

        with open(expected_output, "r") as expected_file:
            expected_minefield = expected_file.read()
            expected_first_line = expected_file.readline()

        # Assert that first line of numbers is replaced with "Field #"
        self.assertEqual(first_line, expected_first_line)

        # Assert that all the safe rooms have integers in them and not "."
        for actual_row, expected_row in zip(formatted_minefield, expected_minefield):
            for actual_cell, expected_cell in zip(actual_row.strip(), expected_row.strip()):
                if expected_cell == ".":
                    # Check that the corresponding actual cell is an integer
                    self.assertTrue(actual_cell.isdigit(), msg=f"Expected integer in cell, got {actual_cell}")

        # Assert that overall formatting is correct
        self.assertEqual(formatted_minefield, expected_minefield)

<<<<<<< HEAD
    def test20_20_40(self):
        """ test 20 row and 20 column with 40 percent mines """
        input_file = "20_20_40_input.txt"
        output_file = "20_20_40_output.txt"
        ms = Minesweeper(input_file, output_file)
        ms.run_minesweeper_solution()
        expected = """Field #1:\n*******2*22*2**1123*\n4*5*543323*333323**2\n*5423*22*313*22*4*53\n***33*33*323*22*43**\n35**33*33*2*32213*6*\n3*55*54*22333*102*6*\n**4****322*3*44223**\n24*6**4*12*43***23**\n14**5453213*33*5*343\n*4**3***423*334*4*3*\n3*54346***43*4**414*\n2**4*5****4*5***202*\n13*5***5**32**532121\n023*5*32221246*32*32\n01*4*3321013***5*4**\n124*54**212*****45**\n1*4***423*44456*6***\n13*44*325**3*3****42\n02*2223***5*6*44*420\n01111*22323***212*10\n"""
        with open('20_20_40_output.txt', 'r') as file:
            content = file.read()
        # compare the expected with the output generated using run_minesweeper_solution method from Minesweeper class
        self.assertEqual(content, expected)

    def test100_100_all_mines(self):
        """ test 100*100 all mines"""
        input_file = "100_100_all_mine_input.txt"

        output_file = "100_100_all_mine_output.txt"
        ms = Minesweeper(input_file, output_file)
        ms.run_minesweeper_solution()

        with open('100_100_all_mine_output.txt', 'r') as file:
            content = file.read()

        expected = """Field #1:\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n"""
        # compare the expected with the output generated using run_minesweeper_solution method from Minesweeper class
        self.assertEqual(content, expected)

    def test100_100_no_mines(self):
        """ test 100*100 no mines"""
        input_file = "100_100_no_mines_input.txt"

        output_file = "100_100_no_mines_output.txt"
        ms = Minesweeper(input_file, output_file)
        ms.run_minesweeper_solution()

        with open('100_100_no_mines_output.txt', 'r') as file:
            content = file.read()
        # compare the expected with the output generated using run_minesweeper_solution method from Minesweeper class
        expected = """Field #1:\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n"""
        self.assertEqual(content, expected)

    def test100_1_no_mines(self):
        """ test 100*1 no mines"""
        input_file = "100_1_no_mines_input.txt"

        output_file = "100_1_no_mines_output.txt"
        ms = Minesweeper(input_file, output_file)
        ms.run_minesweeper_solution()

        with open('100_1_no_mines_output.txt', 'r') as file:
            content = file.read()
        # compare the expected with the output generated using run_minesweeper_solution method from Minesweeper class
        expected = """Field #1:\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"""
        self.assertEqual(content, expected)

    def test100_1_all_mines(self):
        """ test 100*1 all mines"""
        input_file = "100_1_all_mines_input.txt"

        output_file = "100_1_all_mine_output.txt"
        ms = Minesweeper(input_file, output_file)
        ms.run_minesweeper_solution()

        with open('100_1_all_mine_output.txt', 'r') as file:
            content = file.read()
        # compare the expected with the output generated using run_minesweeper_solution method from Minesweeper class
        expected = """Field #1:\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n"""
        self.assertEqual(content, expected)

    def test1_100_all_mines(self):
        """ test 1*100 all mines"""
        input_file = "1_100_all_mines_input.txt"

        output_file = "1_100_all_mines_output.txt"
        ms = Minesweeper(input_file, output_file)
        ms.run_minesweeper_solution()

        with open('1_100_all_mines_output.txt', 'r') as file:
            content = file.read()
        # compare the expected with the output generated using run_minesweeper_solution method from Minesweeper class
        expected = """Field #1:\n****************************************************************************************************\n"""
        self.assertEqual(content, expected)

    def test100_100_50_mines(self):
        """ test 100*100 with 50 percent mines"""
        input_file = "100_100_50_mines_input.txt"

        output_file = "100_100_50_mines_output.txt"
        ms = Minesweeper(input_file, output_file)
        ms.run_minesweeper_solution()

        with open('100_100_50_mines_output.txt', 'r') as file:
            content = file.read()
        # compare the expected with the output generated using run_minesweeper_solution method from Minesweeper class
        expected = """Field #1:\n24*4*12****2224*3****33*12*******2*2**4*44*213***222*3*21*33222*34**3*3112***34**2*3*4*2**22*3322*2*\n****212*7*7*5***34**6**433*7****322456*****22***7*4*45*434***4*5***43*3*24**5***3325**4323*45***4332\n***42013******5445***56**55**7*3223******6533*5***5**5*5**4*5***67*312323**33**523*5***4344***6**2*2\n**6*3212**54422****64*********323**5****4***544445*6*4**5544*56****423*12*5446*5*3**46*****45*44543*\n3**4**33444*32445**4*35*6*7**42*4*6*55*334*****2*4**3435***4**4****4**5323******32233**7*76*422***31\n1235**4**4**4***344*444*55***3346*6**4221*5**5334*55*3*4*635**556*55****34*6*44*4323*6*4*****2225*52\n013***645**54*43*4*6***6***544****6**5*224*54*23***5*534*5*4*6***4**5**5**4*3124***5**434***5*325***\n12******4***42323*********5*4**6*6****45*5**44*4**4***3*4**43****4444**4435*302**8*6**6*43546*6***74\n*45****4*5**3*3*335*545**33*5*6*6**555****65**4*53325*524*43*45532**235*4*5*313****6****5*5*********\n*5**54455*6432*34*533*233212*5****54**346***546*5*213*3*444*33**444434**6**43*3467**66**6******64332\n*7**43******223*5***5333*2123**666**5433**7*5***5*42*233***23*5****2****5**4*22*******54**656***2222\n*****3****65*44*5*8***4**32*456*****4**3**5*7**44**4332*45323*64555557*6*55*434443456*4*6**4***6*3**\n*66*5445**5****45***64**5*33*****5335*54344***53*33**3*3*4*44***2******7**5*6***101**23**5*6****35**\n4**5**3*4**46*6**7***45*422*455**423***4*4*7**5*4225*4122****4443456******6***6432332235*33**7*54**4\n**5***53435*5**7***54**4*222*3*5**4*****4*****6**32**311246*43*2*2**455**7***5**3**322**545**7**5**2\n23*344**3*4*6*****44*5*43*344*34***66***656****7*4*334*33**4*2244445*3*4***755**445**44********6**63\n12211*45*44**7*8*54**422*4***5*34****5*****5*7***4111***4*4*334***3**3124*****445**5*4*456*7*55*****\n2*4344*3**44******4*6*224*45**34*555*435*634*6***31234*5*2323****4*431113*56*53***65*43*4***22**6**3\n3*****446*5*6**66*32**21**44*5*5**3*4*23**34**7**54**44*544*33*6432*334*434***557***34*4***522456*63\n2*****5***6*4*4**334553334**6*4***43*33*5*4**********4******223**344*****3********64*4*55***22******\n34445**6***4534443*****3*45***53422*22*5*6*6***56***6*55***432*33***5*56*66***7*8*4*4*3**6*53*454432\n**32*56**54***3**3357**65**45*5*4232324*****6*53***4**4*7*7*4*22357*43*5****76****43*234*5*6*5*4*100\n4**55***43*345*6*54*******5*23****2*2*3**66*5*5*4433335******311****44**5******7*7*4332*46***7**3211\n*4*****4*3233**7******7*65*423***4223335*4**43**44*33*6*6*6**313455*4**65**6*7*7***5**44********22*3\n2335653334*3*****6*45*6*4***12***434*4*5*5343*44***6****42*544*3**436****556*5***6**5*4**6*7***313**\n*32***12**35*7544*544*4*45*6435*5*****3**6*4*23*5****56*533**5*66*5****64****64546**44*6*53***4202*3\n**55*324*53****23****233*3****4*446**423****334*45**43****556******46**5*56****3***7*6*6**35*5*22332\n3***443***45***22**5433*3236*6*4*3***43344544**4*4**43*6*********44*5**5*3**5434********56*4*545**4*\n35*5***5**5***521344**4*534**5*325**5***4*3**44*5*5**323*7****66433**6*523223*23*******5***53*****6*\n**44***56**45**212**334*****5*322**54****3*5*34**5*55*433**7*5***3*4*4*5*4223*34***6***54**5*5*7**6*\n4*4*445****32*5*33*533*4457*535*33**325*544*54***6**3***555**55*7*43123****3*54**7*546**34*5*32**7**\n*24*32**6**2224*5*4**3*33***6***435*323**3****56*7*545*****6*6*****1013**744***6*5*4**44*43*4445***5\n223*33*5*4323*43**433423********4**5*3*5*5456*6*****5****44****56*4101*5***45**7*53*5*43**23****57**\n2*334*34*43*5**34*22*4*44***54*5*45**534*3**6*****8****5445***7*5*322445*5*5******213**43324***4****\n*44**54*4**5**44*545*7**35**212*5*4***4*345***6******423****6****4*2****434***54432246*5*43***444443\n2**5***5*33**43********7*5*43123**336**44**6*7*6*8**4224*6645*7**5334***5*5***33*32****6***7*64**33*\n234*7***43223*3335**55****5*2*13*533**6**34****5****32**5***3**44**24****6**66*5*4*4544**7*****5*4**\n*45***55**2234*324**55**6**32224**3**6**523**8*66**43*5**7*43455*54*5**7***6****5*4*3*44**556*5*23*4\n****75*5*64**5**3******66**412*3*6*43***5*35*******44*55***43****6*6****5***4****4*34*5*7**3**41123*\n4*7***5****4**645*7********4*3343**3135**44*****655**4**7**6***6*******7*54334654*4*44*****45*3123*3\n*6***4****434***3**456**54*313**33*213*6**5**6**4**54*5********646*******5*44***43*5**5**544**32**3*\n****534*55*45*64345*4***433325**42233***6*5*34*54***435***6555***5*7**66*7******3*4***434*2**64*4443\n235*4*34*4*****4*3**5*6*5**5*****21**46**5*423*5*7*6**5*54**3*665***5*5****76**545*7**32*445***3*4**\n014*54*5*547**5**54*33*5*****67**4344*5**6*5*33****7***45*544****5656*6*65***6*4*****33*4**4**334***\n23***4*5*4***5*6**3224**6*666****5**33**6***34*5*6***76****3*3344*****4**23***4*5*6*422*4444*533**52\n**544*4*4*3324**5*33*6***6****54*4*55*6*5**5*3*314********6*3223*443322233445*54*4*5*2323**23**3**52\n**3*336*423223*4*33****7****7*32243****24**5332334*6*6*754**42**6*3233323***33**35**5*3*33335*423***\n45545***32**4*3323*5555***7*6*32*2*5*4213*7**33***4*35***45*4*5***4*****4***33*6*4*5**33*21***4225**\n*******44*7**44*23**4**7**5**4*3334*53224****4***5*5*4**5**33*45*54*66*56**43*4**646*423*446***4*4**\n*7*8*632*****4**54**6****55**65*5*4***4**335*44*55**44*56**4335***23**6***54*23******42*3****64**55*\n*6****235***55****5*6*****5*******435**53224*44**4**5*4*****4****424*****7**312356****445555**445**3\n**4454*3***5**5*6*44***66*7*6*544*44*6**34**6**6*33*6*656*6*5***53*4**5*****411*4****7*****335**4*6*\n455*5*5*34*44*55*6*5*7*6****44*212***5*7********4334*****3*23***4*3*44556****323***7****6544*6*54*5*\n*******5434*54*****6*4****75*3*2025*54***6555*6*5**4*56*432213*6*3213****4*6*3*335**556*3**4***5*46*\n***55*****4***5*****4436****343212***2234**4*55**56*5*4*21*1024**2125*8*533*4534*55*4**55434*6**5***\n5*5*45*5424*633**54**4*4***54**33*4333335**5***55****4*3322224**533*****5*55***4***34*****45*54**554\n**55**4*224**434*334*5*44**4****5*411*****45**5**44**64*2*34***6**5****7*****8*53533*446******45*4**\n*5***6*45**6***32*3*34*22*44***7***323*5544***45*435***345***55**6*******6*8***3*3*434*4***7*5**35*5\n3*35**4****7***534*5*311234*5****6**1235**5*53*4*6**3333***534**6**655*545****433*5**5*425**24*7*4**\n*544*5*6*********4*6*4223**5*66*5*5433***6**2124***4334*55*33****44**22*3**7**32*5**7**424*535***33*\n****56**6*66555*34*7**4**4*5***4*4**3**65**4312*5*65*****34*5*7**34*53234*5***43*5****7**6*5***63322\n36*******3***5*423*****55534*54*5*6*54*3**4*2*224*****8*53***4**33***3*4*5*55*4*3*5*7*******6**5*2*2\n1****66*4346***5*45***5****533*3**6*4*3323445333*667****5*344*4322***53**6**33*3424*5***5544****334*\n1234*4**42**6*6**4**755**7***5344**6*5*423****4******6***333*44*435***45**544*3*3*55*6*4*3*5567*43**\n112345***44*5*6**55****34******2*4***5***4****6*546*7*433*4***4***6***5***5**5424*****4313******4***\n2*5***45*3*34*5*6**6**545*7***5433245*5545**5**23*6***2135***6*66***7**34*5****22*44***3234****54*53\n3****53*3322*23*4***45*****35*5**212**4**4*543334***6544***5*6***46*7*5213*556*4211136*6**4456**334*\n4*65**334*34333445*54***8*534**34*33*5*45*4**34**6*7*****5455***6*5****314**3***11122******2**56*5**\n***3333**5***3***4**5*8***4**5424*6*5*43**545***6******533******6**446*5*5**65*544*4*45***6556******\n3545*33*5**434*5*334****76*7**3*6***6**45**5**7**346*8*43*545**6**53*4*6**7***3****6*44********55***\n*4***4*34*433*44433*545******33***65**7**4****6*534****5**5*335****45*4*****6324***6**5**544**64*45*\n3**6*313*4*3**4***4**34*****6324*5**4***324*6*5*3****65**5**21****6***435*7**323****7*5*5*224***33*3\n3**32324*53*6*546*555**7******24*53334*4334*33*323****4*6*544456**6*54*24*6*5**56*****33*43*3456*44*\n*6421**4**32**5**6***4****6*545***44*312***422*31345434*6*6*****5**45*5*3**4*5*****76434**33*4***4**\n***21335**424**6****5445**523********21356**3444*4**11*3*****7*4*33****2235*45***6****3**7*32***56*4\n*6*433*4**6*33**45**4**56*6*55*7**5*533***54****6**43233345***331236**3212**4***6*556*55***21345***2\n*42***6*5***3355*35*66********5**532**4****2345***6*2*3*32*555*312***311*334*4*6***2***3*54322*4*642\n*324****56*54***22******6*44**4***124*44**433*224**3214**44**5*5*433321123*2134***445*4434**4*6*5**1\n*43*5434***5***31247*7*5*4322346*522*4*5432**43236*4234***5*7**5**213*422*3312**643**6*4**44****7*52\n**5**213**6**53222****5*5**311***5*424***1135**3***3***7*6*****43*22****33*2*223**33***7**33**7***5*\n*5**5*23***6*43*4*6**7***7**33565***44**5422***556434****6**7**42113*644*43443236*425*****33**4*5**2\n24*55*44*43**4**6*6*********4****34***45***34*6****12***6**5****3323**24**3***3***5*5**77*32*4313442\n2*5**4**2224*545***555*66555*6**5334543****45*5*555334*5**4*6**4***344*4**545*3245***5****323*312**2\n*4**5*4322*44**4**6**33***3***5*5**3**336*6***423***3*35*422**54455*5*5*44**44434**8*43444*34*6*44*2\n*4345*43*44**534*6**54*5**4456*6**4*322*4*5*5*32*5*5*33**4245**4**5****33*66*********33*44**4****432\n23*2***4*5****12**55**45*5*5*****54331224*32433*4*5*44*6*4***55**7*****22******55***65****434**6**3*\n2*455533*4*543346**6*6**35********4**22*3212**424**4**3**33**3******8*63224556*33*7****5*5*23**323*2\n*4****32245*33*******5*5*5**7*8***7*43*5*423***23*5*5433332323455*******312**3*23*6*6*433*33*4322443\n*5334**22***5*******55*65***6*******44*7***436*54*44**12*5*312**44****7*6*4333212**44*32*34*6*22****\n**10246*45***4346***5*****64**6**6***5*****6*5***5*6*523***5*44*4*6***7****23*2135*3*33*5*4***34**7*\n*5423****4***433**64*******3334*54****445****5*7*7***5*4555**6*33**34***6654**54**4424*6**42323***6*\n4***5**634**5***5*6*6**54445*34*4*4*55*44***66*6******5***4****324322466****5******2*5****43223**5**\n*****5**12*56**54****34*21***4**4343*4***57*****33335**57*545544*5*33******7*67***544***75***5*6*55*\n**66*322234****4*55*545*5345*3345**434*44***655422124*5****2**2****5***7********8**4**5***6****5**3*\n45**21113**6**55**23******4*433*****3*424*7*4**4*2*3**645*3223457***34**445*6*****6**4325*5*545*4332\n**53202*5**7**3**633**45**6*5**66*435*5*3*4*44**222*5***323223*****522233*334*67**4*5*214*423*5*43*3\n**5*203**6***423***33444**7**6***212***233533*543233*5654*3**4***6*6*313*5*3*6***4336*42**32*5**4***\n45**302*5****21346*53***5****5*53223*5322***32**2**23****4*33*4*56***4*4**34*****42***4*45*33**6*432\n**5*2124*6*5323**6***6**34**44*33*3*5*21*34*323334334*6**5333443***656*44*44*****4*345*44**43**6*421\n3*3111*3**3*11******4**312*32*3*3*32**2111112*11*2*2**323**2***23*4****22**3*44*4*211***3**3*33***2*\n"""
        self.assertEqual(content, expected)

    def test1_1_all_mine(self):
        """ test 1*1 all mine"""
        input_file = "1_1_all_mine_input.txt"

        output_file = "1_1_all_mine_output.txt"
        ms = Minesweeper(input_file, output_file)
        ms.run_minesweeper_solution()

        with open('1_1_all_mine_output.txt', 'r') as file:
            content = file.read()
        # compare the expected with the output generated using run_minesweeper_solution method from Minesweeper class
        expected = """Field #1:\n*\n"""
        self.assertEqual(content, expected)

    def test1_1_no_mine(self):
        """ test 1*1 no mines"""
        input_file = "1_1_no_mine_input.txt"

        output_file = "1_1_no_mine_output.txt"
        ms = Minesweeper(input_file, output_file)
        ms.run_minesweeper_solution()

        with open('1_1_no_mine_output.txt', 'r') as file:
            content = file.read()
        # compare the expected with the output generated using run_minesweeper_solution method from Minesweeper class
        expected = """Field #1:\n0\n"""
        self.assertEqual(content, expected)

    def test_24_32_43_mine(self):
        """ test 24*32 with 43 percent mines"""
        input_file = "24_32_43_input.txt"

        output_file = "24_32_43_output.txt"
        ms = Minesweeper(input_file, output_file)
        ms.run_minesweeper_solution()

        with open('24_32_43_output.txt', 'r') as file:
            content = file.read()
        # compare the expected with the output generated using run_minesweeper_solution method from Minesweeper class
        expected = """Field #1:\n*22*3****3*322*3333***2***23**2*\n13*45***33**3*5****4*434*42**432\n02*3***533335*5*6*422*12*335*32*\n12234**5**23**523*21333234**44*4\n*12*55*6*6*4***11112**4*2****5**\n334***4***4*55310013***3435***54\n**5*54*333*4**32111*554*2*24*5**\n***3*3321114***3*224**324333*333\n34233*3*3224***424*5*44*4**4321*\n*322*35*6**5*644*6**44***34**432\n4**34*4****6**4****5**5*433****3\n**4*4*335**7***44*6*54*4*5*67***\n2223*532*4***6*444**5*34******7*\n1103***21236*42***5*5*22***444**\n*213*422123**334*44*543224322*5*\n*22*3102*4**4*3*5*33***213*45*41\n233*4323**43314**5*44*54*4****20\n*4*4***3333*312**5**54**3*45*531\n**4*5644*34**335*43***3234*43**2\n23*3***4**5***3**425*4213***235*\n02232335**4**56**4*4*33*6**533**\n12*2111**5555***33*423*****4**54\n*323*2223****543233*35*7**45*7**\n12*22*10124***11*2*3****33*3***3\n"""
        self.assertEqual(content, expected)

    def test1_100_no_mine(self):
        """ test 1*100 no mines"""
        input_file = "1_100_no_mine_input.txt"

        output_file = "1_100_no_mine_output.txt"
        ms = Minesweeper(input_file, output_file)
        ms.run_minesweeper_solution()

        with open('1_100_no_mine_output.txt', 'r') as file:
            content = file.read()
        # compare the expected with the output generated using run_minesweeper_solution method from Minesweeper class
        expected = """Field #1:\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n"""
        self.assertEqual(content, expected)
=======
>>>>>>> 4c225dd78a4bd467814f76047c315bca9172f03b


if __name__ == '__main__':
    unittest.main()
